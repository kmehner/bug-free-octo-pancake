import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';

// Creating a product slice to fetch data from an API instead 
// of using a hardcoded array of products


export const fetchProducts = createAsyncThunk(
  // action type 
  'products/fetchProducts',

  // Async function to fetch data that will return action payload 
  async () => {
    const response = await fetch('https://fakestoreapi.com/products')
    if (!response.ok){
      throw new Error('failed to fetch products') // if failure - error is the action payload 
    }

    const products = await response.json()
    return products // if success - action payload (getting the product data and sending it to our reducer as data that it can do something with)
  }
)

export const productSlice = createSlice({
  name: "products",
  initialState: {
    items: [], // switching this to an array since we are emulating the setup of our dummy data 
    status: 'idle', // 'idle' | 'loading' | 'succeeded' | 'failed' 
    error: null
  },
  reducers: {},

  // Handle async functions 
  // builders allow you to define how a slice should respond to different actions 
  // addCase (pending, fulfilled, rejected)
  // Each argument takes two parameters:
    // the action type (generated by the async thunk function)
    // a callback function (state, action) => {} 
  extraReducers: (builder) => {
    builder
      .addCase(fetchProducts.pending, (state) => {
        state.status = 'loading'
      })
      .addCase(fetchProducts.fulfilled, (state, action) => {
        state.status = 'succeeded'
        state.items = action.payload
      })
      .addCase(fetchProducts.rejected, (state, action) => {
        state.status = 'failed'
        state.error = action.payload
      })
  }
})

export default productSlice.reducer